var args = require("./args");
var fs = require("fs");
var utils = require("./utils")
var SUFFIX = "yky";
var singleMark = ["html", "blank", "extends", "include", "param"];
var doubleMark = ["list", "map", "block"];

////////////////////////////////////////////////////////////////////////
// 文件处理的总入口
////////////////////////////////////////////////////////////////////////
var generateFile = function(fileName) {
    //对文件进行切片
    var splitpiece = analysFile(fileName);
    //console.log("splitpiece\n", JSON.stringify(splitpiece, 4, 4), "\n\n");

    //对切片后的文件进行重建
    var rebuildpiece = rebuild(splitpiece);
    //console.log("rebuildpiece\n", JSON.stringify(rebuildpiece, 4, 4), "\n\n");

    //对文件进行扩展
    var expands = includeAndExtends(rebuildpiece);
    //console.log("expands\n", JSON.stringify(expands, 4, 4), "\n\n");


    /*
     /*
     while (loop != -1) {
     newSpliltpiece = analysFile(splitpiece[loop]["fileName"]);
     splitpiece = mergeExtendspiece(newSpliltpiece, splitpiece);
     loop = isContainExtends(splitpiece);
     }
     */
    return expands;
};

////////////////////////////////////////////////////////////////////////
// 对 piece 进行判断，判断他的属性，作用，返回他的具体类型
////////////////////////////////////////////////////////////////////////
var getpieceType = function(begin, end, content){
    var piece = content.substring(begin, end); //  最长的是{{end block
    //判断是否为 空字符串
    if(utils.trim(piece).length == 0)
        return ["blank"];
    //自定义语句
    if(utils.startWith(utils.ltrim(piece), "{{"))
            return getSpiltParamenter(piece);
    //默认返回值
    return ["html"];
};

var getSpiltParamenter = function(piece){
    var content = utils.trim(piece).substring(2, piece.length - 2);
    var ls = content.split(" ");
    var newls = [];
    for(var i in ls){
        if(!utils.trim(ls[i]).length == 0){
            newls.push(ls[i]);
        }
    }
    return newls;
};

////////////////////////////////////////////////////////////////////////
// 对 piece进行拆分, 将标签进行一个大的归类，
//  extends， block， param， list
//  map， define 等
////////////////////////////////////////////////////////////////////////
var split = function(str) {
    //获取切片点
    var arr = [];
    var stacklen = 0;
    var cutPoint = [ 0, ];
    for (var i = 0; i < str.length; i++) {
        if (str[i] == "{" && str[i + 1] == "{") {
            if (stacklen++ == 0) {
                cutPoint.push(i);
            }
        } else if (str[i] == "}" && str[i + 1] == "}") {
            if (stacklen-- == 1) {
                cutPoint.push(i + 2);
                i++;
            }
        }
    }
    cutPoint.push(str.length);
    //对文件进行切片
    stacklen = 0;
    for (i = 0, size = cutPoint.length - 1; i < size; i++) {
        var type = getpieceType(cutPoint[i], cutPoint[i+1], str);
        if(type[0] == "blank") continue;
        arr.push({
            "type":type,
            "content":str.substring(cutPoint[i], cutPoint[i + 1])});
    }
    return arr;
};

////////////////////////////////////////////////////////////////////////
// 将文件拉入内存， 并处理文件
////////////////////////////////////////////////////////////////////////
var analysFile = function(file, type) {
    type = type || "file";

    name = file.substring(file.lastIndexOf(args.spliter) + 1);
    prefix = name.substring(0, name.lastIndexOf("."));
    suffix = name.substring(name.lastIndexOf(".") + 1);
    var content = "";
    var contentList = [];
    var temContentList = [];
    if (suffix.toLowerCase() != SUFFIX) {
        throw new error("not the proper file: file: " + file);
    } else {
        content = fs.readFileSync(file, 'utf-8');
        if (content == "" || content == null) {
            return [];
        } else {
            // 对语法进行最基础的划分
            return split(content);
        }
    }
};

////////////////////////////////////////////////////////////////////////
//  对拆分的文件进行归并
////////////////////////////////////////////////////////////////////////
var rebuild = function(piece, begin, end){
    var begin = begin || 0;
    var end   = end   || piece.length;
    var rebuildpiece = [];
    var index = 0;

    for(index=begin; index < end;){
        if(singleMark.indexOf(piece[index]["type"][0]) >= 0){  //单列属性
            rebuildpiece.push(piece[index++]);
        }else{									  //多列属性
            var tem = _rebuild(piece, index);
            index = tem[0];
            rebuildpiece.push(tem[1]);
        }
    }
    return rebuildpiece;
};

var _rebuild = function(piece, index){
    var rebuildpiece = [];
    var stacklen = 0;
    do{
        if(piece[index]["type"][0] == "end"){                   //处理end
            stacklen--;
            if(stacklen == 0){
                index ++;
                tem = rebuild(rebuildpiece, 1);
                rebuildpiece[0]["children"] = tem;
                rebuildpiece = rebuildpiece[0];
            }else{
                rebuildpiece.push(piece[index++]);
            }
        }else

        if(singleMark.indexOf(piece[index]["type"][0]) >= 0){    //单列属性
            rebuildpiece.push(piece[index++]);
        }else{													//多列属性
            stacklen ++;
            rebuildpiece.push(piece[index++]);
        }
    }while(stacklen != 0);
    return [index, rebuildpiece];
};

var getblockList = function(piece){
    var ls = [];
    for(var i= 0, len = piece.length;i<len; i++) {
        if (piece[i]["type"][0] == "block") {
            processBlock(piece[i], ls, []);
        }
    }
    return ls;
};

var processBlock = function(piece, ls, seq){
    var newSeq = JSON.parse(JSON.stringify(seq));
    newSeq.push(piece["type"][1]); //复制
    ls.push(newSeq);    //将blockName放进去
    var children  = piece["children"];
    for(var i= 0, len = children.length; i< len; i++){
        if(children[i]["type"][0] == "block"){
            processBlock(children[i], ls, newSeq );
        }
    }
};

////////////////////////////////////////////////////////////////////////
// include and extends 处理
////////////////////////////////////////////////////////////////////////
var includeAndExtends = function (piece) {
    //先处理include， 将当前文件展开
    var len = piece.length;
    var newPiece = JSON.parse(JSON.stringify(piece));

	//处理 include 模板, 啥时候也离不开指针啊
	recursionInclude(newPiece);
    //继承模板显得非常复杂

	//extends 必定在第一层，而且只有一个
    for(var i= 0; i<len; i++){
        if(newPiece[i]["type"][0] == "extends"){
            //对文件的block进行归并
            var blockList = getblockList(newPiece);
            var extendsPiece = generateFile(piece[index]["type"][1]);
            newPiece = processExtends(newPiece, extendsPiece);
            return newPiece;
        }
    }
    return newPiece;
};

var recursionInclude = function(newPiece){
	for(var i in newPiece){
		if(newPiece[i]["type"][0] == "include"){
			processInclude(newPiece, i);
		}else if(newPiece[i]["type"][0] == "block"){
			recursionInclude(newPiece[i]["children"]);
		}
	}
}

var processInclude = function(piece, index){
    var content = generateFile(piece[index]["type"][1]);
	var temlist = [];
	for(var i = 0, len=piece.length-index; i<len; i++){
		temlist.push(piece.pop());
	}
	for(var i=0, len = content.length;i<len; i++){
		piece.push(content.pop());
	}
	temlist.pop();
	for(var i=0, len = temlist.length; i<len; i++){
		piece.push(temlist.pop());
	}
};

//反客为主
var processExtends = function (piece, extendsPiece) {
	var pieceList = getblockList(piece);
    var extendsList = getblockList(extendsPiece);
    //排序， 让最外围标签能够最先被替换掉
    pieceList = pieceList.sort(function(a, b) {
        return a.length > b.length;
    });

	console.log("conentent block list:\n", JSON.stringify(extendsList, 0, 1));
    //console.log("content blocklist:\n", blockList);
	//只替换最上层的内容
    for(var i= 0, leni=blockList.length;i<leni;i++){
        if(blockList[i].length != 1){
            break;
        }else{
			var val = matchBlockList(pieceList[i][0], extendsList);
			console.log("val:\n", val);
			if(val != -1){
				replaceExtendsBlocks(piece[i], extendsPiece, extendsList[val]);
			}
        }
    }
	return extendsPiece;
};

var matchBlockList = function(value, blockList){
	//替换所有命名相同的变量
	for(var i in blockList){
		//匹配成功， 之匹配第一个， 开始替换和删除
		if(blockList[i][blockList[i].length - 1] == value){
			return i;
		}
	}
	return -1;
}

var replaceExtendsBlocks = function(piece, extendsPiece, extendsList){
	//直接遍历， 横向遍历更好，但是我不会，也不愿意想了
	for(var i in extendsPiece){
		if(extendsPiece[i]["type"][1] == "block" && extendsPiece[i]["type"][1] == extendsList[0]){
			if(extendsList.length == 1){
				extendsPiece[i] = piece;
				return;
			}else{
				replaceExtendsBlocks(piece, extendsPiece[i]["children"], extendsList.slice(1));
			}
		}
	}
}

module.exports = {
    generateFile : generateFile
};













/*
var processInclude = function(piece, index){
    var content = generateFile(piece[index]["type"][1]);
    var head = piece.slice(0, index-1);
    var tail = piece.slice(index+1, -1);
    piece = [].concat(head, content, tail);
    return piece;
};
*/

/*
var args = require("./args");
var fs = require("fs");
var utils = require("./utils")
var SUFFIX = "yky";
var singleMark = ["html", "blank", "extends", "include", "param"];
var doubleMark = ["list", "map", "block"];

////////////////////////////////////////////////////////////////////////
// 对 slice 进行判断，判断他的属性，作用，返回他的具体类型
////////////////////////////////////////////////////////////////////////
var getSliceType = function(begin, end, content){
	var slice = content.substring(begin, end); //  最长的是{{end block
	//判断是否为 空字符串
	if(utils.trim(slice).length == 0)
		return ["blank",];
	//单列属性
	if(utils.startWith(utils.ltrim(slice), "{{extends"))
		return ["extends",];
	if(utils.startWith(utils.ltrim(slice), "{{include"))
		return ["include",];
	if(utils.startWith(utils.ltrim(slice), "{{`"))
		return ["param",];
	if(utils.startWith(utils.ltrim(slice), "{{="))
		return ["param",];
	//双列属性
	if(utils.startWith(utils.ltrim(slice), "{{list"))
		return ["list",];
	if(utils.startWith(utils.ltrim(slice), "{{map"))
		return ["map",];
	if(utils.startWith(utils.ltrim(slice), "{{block"))
		return ["block",];
	if(utils.startWith(utils.ltrim(slice), "{{end block"))
		return ["end", "block"];
	if(utils.startWith(utils.ltrim(slice), "{{end map"))
		return ["end", "map"];
	if(utils.startWith(utils.ltrim(slice), "{{end list"))
		return ["end", "list"];
	//默认返回值
	return ["html"];
}


////////////////////////////////////////////////////////////////////////
// 对 slice进行拆分, 将标签进行一个大的归类，
//  extends， block， param， list
//  map， define 等
////////////////////////////////////////////////////////////////////////
var split = function(str) {
	//获取切片点
	var arr = [];
	var stacklen = 0;
	var cutPoint = [ 0, ];
	for (var i = 0; i < str.length; i++) {
		if (str[i] == "{" && str[i + 1] == "{") {
			if (stacklen++ == 0) {
				cutPoint.push(i);
			}
		} else if (str[i] == "}" && str[i + 1] == "}") {
			if (stacklen-- == 1) {
				cutPoint.push(i + 2);
				i++;
			}
		}
	}
	cutPoint.push(str.length);
	//对文件进行切片
	stacklen = 0;
	for (i = 0, size = cutPoint.length - 1; i < size; i++) {
		var type = getSliceType(cutPoint[i], cutPoint[i+1], str);
		if(type[0] == "blank") continue;
		arr.push({
			"type":type,
			"content":str.substring(cutPoint[i], cutPoint[i + 1])});
	}
	return arr;
};


////////////////////////////////////////////////////////////////////////
// 将文件拉入内存， 并处理文件
////////////////////////////////////////////////////////////////////////
var analysFile = function(file, type) {
	type = type || "file";

	name = file.substring(file.lastIndexOf(args.spliter) + 1);
	prefix = name.substring(0, name.lastIndexOf("."));
	suffix = name.substring(name.lastIndexOf(".") + 1);
	var content = "";
	var contentList = [];
	var temContentList = [];
	if (suffix.toLowerCase() != SUFFIX) {
		throw new error("not the proper file: file: " + file);
	} else {
		content = fs.readFileSync(file, 'utf-8');
		if (content == "" || content == null) {
			return [];
		} else {
			// 对语法进行最基础的划分
			return split(content);
		}
	}
}


////////////////////////////////////////////////////////////////////////
// 文件处理的总入口
////////////////////////////////////////////////////////////////////////
var generateFile = function(fileName) {
	//对文件进行切片
	var splitSlice = analysFile(fileName);
	//对切片后的文件进行重建
	var rebuildSlice = genFun(splitSlice);

	console.log("JSONED FILE\n", JSON.stringify(rebuildSlice, 4, 4), "\n\n");

	return rebuildSlice;
};

////////////////////////////////////////////////////////////////////////
// 文件处理的总入口
////////////////////////////////////////////////////////////////////////
var genFun = function(slice, begin, end){
	var begin = begin || 0;
	var end   = end   || slice.length;
	var rebuildSlice = [];
	var index = 0;

	for(index=begin; index < end;){
		if(singleMark.indexOf(slice[index]["type"][0]) >= 0){  //单列属性
			rebuildSlice.push(slice[index++]);
		}else{									  //多列属性
			var tem = markDouble(slice, index);
			index = tem[0];
			rebuildSlice.push(tem[1]);
		}
		console.log("index:\n", index);
	}
	return rebuildSlice;
}

////////////////////////////////////////////////////////////////////////
// 对 doubleMark  的处理
////////////////////////////////////////////////////////////////////////
var markDouble = function(slice, index){
	var rebuildSlice = [];
	var stacklen = 0;
	do{
		if(slice[index]["type"][0] == "end"){                   //处理end
			stacklen--;
			if(stacklen == 0){
				index ++;
				tem = genFun(rebuildSlice, 1);
				rebuildSlice[0]["children"] = tem;
				rebuildSlice = rebuildSlice[0];
			}else{
				rebuildSlice.push(slice[index++]);
			}
		}else

		if(singleMark.indexOf(slice[index]["type"][0]) >= 0){    //单列属性
			rebuildSlice.push(slice[index++]);
		}else{													//多列属性
			stacklen ++;
			rebuildSlice.push(slice[index++]);
		}
	}while(stacklen != 0);

	return [index, rebuildSlice];
}

module.exports = {
	generateFile : generateFile
}

*/
